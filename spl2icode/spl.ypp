/* parser for s-expressions */

%language "C++"
%defines
%locations

%define parser_class_name "spl_parser"

%{
#include "spl.h"
#include "symbol.h"
#include "symboltable.h"
#include <iostream>

extern list<Template*> templates;
extern list<List*> lists;
%}

%union {
	int n;
	double d;
	char *x;
	char *i;
	List *l;
	Seq *s;
	char *c;
	Directive *dir;
	StmtList *sl;
	enum CmpType cmp;
	char *ici;
	char *p;
	Node *node;
	ICodeStmt *icode_stmt;
	ICodeStmtList *icode_stmtlist;
	ICode *icode;
	ICodeVecIndex *icode_vec_ind;
	Seq *ind_list;
	};

/* declare tokens */
%token <n> INTEGER
%token <d> DOUBLE
%token <x> COMPLEX
%token <i> IDENT
%token <l> LIST
%token <c> COMMENT
%token <p> ICODE_MATRIX_PAT ICODE_SCALAR_PAT
%token <ici> IN_IDENT OUT_IDENT INDEX_IDENT FLOAT_IDENT TMP_VEC_IDENT INT_IDENT
%token <c> W
%token DO
%token END
%token TEMPLATE
%token DEFINE
%token ANDAND
%token OROR

%token SUBNAME
%token SHAPE

%type <sl> stmt_list
%type <node> stmt listelement expr value cond template define call opt int_opt condition compare icode_ident pattern icode_dot icode_func icode_expr
%type <icode_stmtlist> icode_stmt_list
%type <icode> icode_assign_stmt icode_do_stmt icode_end_stmt icode_stmt icode_matrix_call 
%type <icode_vec_ind> icode_vec_index
%type <s> listsequence pattern_list
%type <dir> directive
%type <ind_list> index_list

%nonassoc <cmp> CMP
%right '='
%left '+' '-'
%left '*' '/'
%left '('
%left ')'
%nonassoc UMINUS
%left '.'

%start start

%{
extern int yylex(yy::spl_parser::semantic_type *yylval, yy::spl_parser::location_type *yylloc);
%}

%%

start: stmt_list { eval($1); }
;

stmt_list: stmt stmt_list { $2->insert($1); $$ = $2; }
	| stmt { $$ = new StmtList($1); }
;

stmt: COMMENT { $$ = new Comment(string($1)); }
	| directive template { $$ = $2; templates.push_front((Template*) $2); }
	| template { $$ = $1; templates.push_front((Template*) $1); }
	| define { $$ = $1; }
	| directive call { $$ = $2; }
	| call { $$ = $1; }
	| IDENT { 
	
		SymbolTable *t = SymbolTable::instance();
		Symbol *s = t->find(string($1));

		if(s == NULL)
		{
			cerr << "Error: symbol undefined: " << $1 << endl;
			exit(1);
		}
		else
		{
			cerr << "replacing symbol: " << $1 << endl;
			Seq *seq = ((Define*)s->node)->seq;
			$$ = *seq->s.begin();
			/*ICodeIdent *i = (ICodeIdent*)*seq->s.begin();
			vector<Node*> v(seq->s.begin()+1,seq->s.end());
			Seq *new_seq = new Seq();
			new_seq->s = v;
			$$ = new Call(i->ident, new_seq);*///((Define*)s->node)->seq);
			//$$ = ((Define*)s->node)->seq;
		}
	}
;

directive: '#' SUBNAME IDENT { $$ = new Directive(DIR_SUBNAME, string($3)); }
	| '#' SHAPE IDENT IDENT { $$ = new Directive(DIR_SHAPE, string($3), string($4)); }
;

template: TEMPLATE '(' IDENT pattern_list ')' cond '(' icode_stmt_list ')' ')' { $$ = new Template(string($3), $4, $6, $8); }
;

pattern_list: pattern pattern_list { $2->insert($1); $$ = $2; }
	| pattern { $$ = new Seq($1); }
;

pattern: ICODE_MATRIX_PAT { $$ = new ICodePattern(string($1)); }
	| ICODE_SCALAR_PAT { $$ = new ICodePattern(string($1)); }
	| INTEGER { $$ = new Integer($1); }
;

define: DEFINE IDENT listsequence ')' 
	{ 
		$$ = new Define($2, $3); 
		SymbolTable *t = SymbolTable::instance();
		Symbol *s = new Symbol($2, $$);
		t->insert(s);
	}
;

call: '(' IDENT listsequence ')' { $$ = new Call($2, $3); }
;

icode_stmt_list: icode_stmt icode_stmt_list {$2->insert($1); $$ = $2; }
	| icode_stmt { $$ = new ICodeStmtList($1); }
;

icode_stmt: icode_do_stmt { $$ = $1; }
	| icode_end_stmt { $$ = $1; }
 	| icode_assign_stmt { $$ = $1; }
	| icode_matrix_call {$$ = $1; }
;

icode_do_stmt: DO INDEX_IDENT '=' icode_expr ',' icode_expr { $$ = new ICode(ICODE_OP_DO, new ICodeIdent(IDENT_INDEX, $2), $4, $6); }
;

icode_end_stmt: END { $$ = new ICode(ICODE_OP_END); }
;

icode_assign_stmt: icode_ident '=' opt { $$ = new ICode(ICODE_OP_ASSIGN, $1, $3); }
	| icode_ident '=' opt '+' opt { $$ = new ICode(ICODE_OP_ADD, $1, $3, $5); }
	| icode_ident '=' opt '-' opt { $$ = new ICode(ICODE_OP_SUB, $1, $3, $5); }
	| icode_ident '=' opt '*' opt { $$ = new ICode(ICODE_OP_MUL, $1, $3, $5); }
	| icode_ident '=' opt '/' opt { $$ = new ICode(ICODE_OP_DIV, $1, $3, $5); }
;

icode_expr: opt '+' opt { $$ = new ICode(ICODE_OP_ADD, NULL, $1, $3); }
	| opt '-' opt { $$ = new ICode(ICODE_OP_SUB, NULL, $1, $3); }
	| opt '*' opt { $$ = new ICode(ICODE_OP_MUL, NULL, $1, $3); }
	| opt '/' opt { $$ = new ICode(ICODE_OP_DIV, NULL, $1, $3); }
	| opt { $$ = $1; }
;

icode_matrix_call: ICODE_MATRIX_PAT '(' opt ',' opt ',' opt ',' opt ',' opt ',' opt ')' { $$ = new ICode(ICODE_OP_CALL, new ICodePattern(string($1)), $3, $5, $7, $9, $11, $13); }
;

listsequence: listelement listsequence { $2->insert($1); $$ = $2; }
	| listelement { $$ = new Seq($1); }
;

listelement: value { $$ = $1; }
	| call { $$ = $1; }
	| IDENT 
	{ 
		SymbolTable *t = SymbolTable::instance();
		Symbol *s = t->find(string($1));

		if(s == NULL)
		{
			cerr << "Error: symbol undefined: " << $1 << endl;
			exit(1);
		}
		else
		{
			cerr << "replacing symbol: " << $1 << endl;
			Seq *seq = ((Define*)s->node)->seq;
			$$ = *seq->s.begin();
			/*ICodeIdent *i = (ICodeIdent*)*seq->s.begin();

			cout << "type: " << i->type << "--"<<endl;
			i->print(0);
			cout << "--"<<endl;

			seq->print(0);
			cout << "--"<<endl;
			exit(1);
			vector<Node*> v(seq->s.begin()+1,seq->s.end());
			Seq *new_seq = new Seq();
			new_seq->s = v;
			$$ = new Call(i->ident, new_seq);//((Define*)s->node)->seq);*/
			//$$ = ((Define*)s->node)->seq;
		}
	}
;

cond: '[' condition ']' { $$ = $2; }
;

condition: condition ANDAND compare { $$ = new List(); }
	| condition OROR compare { $$ = new List(); }
	| compare { $$ = $1; }
;

compare: expr CMP expr { $$ = new Comparison($1, $2, $3); }
;

expr: expr '+' expr {$$ = new Plus($1, $3); }
	| expr '-' expr {$$ = new Minus($1, $3); }
	| expr '*' expr {$$ = new Multiply($1, $3); }
	| expr '/' expr {$$ = new Divide($1, $3); }
	//| icode_dot { $$ = $1; }
	| '(' expr ')' { $$ = $2; }
	| int_opt { $$ = $1; }
	//| INTEGER { $$ = new Integer($1); }
	//| ICODE_MATRIX_PAT { $$ = new ICodePattern(string($1)); }
	//| ICODE_SCALAR_PAT { $$ = new ICodePattern(string($1)); }
;

opt: icode_vec_index { $$ = $1; }
	| icode_func { $$ = $1; }
	//| icode_func_call { $$ = $1; }
	| int_opt { $$ = $1; }
; 

icode_vec_index: TMP_VEC_IDENT '(' index_list ')' { $$ = new ICodeVecIndex(new ICodeIdent(IDENT_VEC, string($1)), $3); }
	| IN_IDENT '(' index_list ')' { $$ = new ICodeVecIndex(new ICodeIdent(IDENT_IN, string($1)), $3); }
	| OUT_IDENT '(' index_list ')' { $$ = new ICodeVecIndex(new ICodeIdent(IDENT_OUT, string($1)), $3); }
;

index_list: int_opt index_list { $2->insert($1); $$ = $2; }
	| int_opt { $$ = new Seq($1); }
;

 /* TODO: fix this, it's hacky */
 /*
icode_func_call: IDENT '(' opt opt ')' { $$ = new ICode(ICODE_OP_CALL, (Node*)new Ident(string($1)), $3, $4); }
	| IDENT '(' opt opt opt ')' { $$ = new ICode(ICODE_OP_CALL, (Node*)new Ident(string($1)), $3, $4, $5); }
;
 */

int_opt: INTEGER { $$ = new Integer($1); }
	| FLOAT_IDENT { $$ = new ICodeIdent(IDENT_COMPLEX, string($1)); }
	| INDEX_IDENT { $$ = new ICodeIdent(IDENT_INDEX, string($1)); }
	| INT_IDENT { $$ = new ICodeIdent(IDENT_SCALAR, string($1)); }
	| IN_IDENT { $$ = new ICodeIdent(IDENT_IN, string($1)); }
	| OUT_IDENT { $$ = new ICodeIdent(IDENT_OUT, string($1)); }
	| TMP_VEC_IDENT { $$ = new ICodeIdent(IDENT_VEC, string($1)); }
	| ICODE_SCALAR_PAT { $$ = new ICodePattern(string($1)); }
	| icode_dot { $$ = $1; }
;

icode_dot: ICODE_MATRIX_PAT '.' IDENT { $$ = new ICodeDot(new ICodePattern(string($1)), new Ident(string($3))); }
	| IN_IDENT '.' IDENT { $$ = new ICodeDot(new ICodeIdent(IDENT_IN, string($1)), new Ident(string($3))); }
	| OUT_IDENT '.' IDENT { $$ = new ICodeDot(new ICodeIdent(IDENT_OUT, string($1)), new Ident(string($3))); }
	| TMP_VEC_IDENT '.' IDENT { $$ = new ICodeDot(new ICodeIdent(IDENT_VEC, string($1)), new Ident(string($3))); }
;

icode_func: W '(' int_opt ',' int_opt ',' int_opt ')' { $$ = new ICodeFunc(string($1), $3, $5, $7); }
	| W '(' int_opt ',' int_opt ')' { $$ = new ICodeFunc(string($1), $3, $5); }
;

value: INTEGER { $$ = new Integer($1); }
	| DOUBLE { $$ = new Double($1); }
	| COMPLEX { $$ = new Complex(string($1)); }
;

icode_ident: INDEX_IDENT { $$ = new ICodeIdent(IDENT_INDEX, string($1)); }
	| FLOAT_IDENT { $$ = new ICodeIdent(IDENT_COMPLEX, string($1)); }
	| INT_IDENT { $$ = new ICodeIdent(IDENT_SCALAR, string($1)); }
	| icode_vec_index { $$ = $1; }
;

%%

namespace yy {
	void spl_parser::error(location const&loc, const std::string& s)
	{
		std::cerr << "error at " << loc << ": " << s << std::endl;
	}
}


